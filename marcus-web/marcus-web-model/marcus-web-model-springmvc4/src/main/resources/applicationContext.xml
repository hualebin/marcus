<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:aop="http://www.springframework.org/schema/aop"
 xmlns:tx="http://www.springframework.org/schema/tx"
 xmlns:context="http://www.springframework.org/schema/context"
 xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
">
	<!-- 指定扫描注解的包 -->
    <context:component-scan base-package="com.marcus">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <!-- 加载jdbc/hibernate配置信息 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="false">
		<property name="locations">
			<list>
				<value>classpath:hibernate.properites</value>
			</list>
		</property>
	</bean>
    <!-- 阿里巴巴连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    	<!-- 基本属性 url、user、password -->
		<property name="url"><value>${jdbc.url}</value></property>
		<property name="username"><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize"><value>${jdbc.initialSize}</value></property>
      	<property name="minIdle"><value>${jdbc.minIdle}</value></property> 
      	<property name="maxActive"><value>${jdbc.maxActive}</value></property>
      	<!-- 配置获取连接等待超时的时间 -->
      	<property name="maxWait"><value>${jdbc.maxWait}</value></property>
      	<!-- 检测连接 -->
      	<property name="validationQuery"><value>${jdbc.validationQuery}</value></property>
		<property name="testOnBorrow"><value>${jdbc.testOnBorrow}</value></property>
	</bean>
	
	<!-- hibernate5 session factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="packagesToScan">
			<!-- 可配置多个 -->
			<list>
				<value>com.marcus.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.validator.autoregister_listeners">${hibernate.validator.autoregister_listeners}</prop>
                <prop key="hibernate.validator.apply_to_ddl">${hibernate.validator.apply_to_ddl}</prop>
                <prop key="javax.persistence.validation.mode">${javax.persistence.validation.mode}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
			</props>
		</property>
	</bean>
    

	<!-- 配置事务管理,使用annotation定义事务 -->
    <bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>	
    <tx:annotation-driven transaction-manager="txManager" /> 
 
	
	<!-- 定时器配置 -->
    <bean id="jobDemo" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    	<property name="jobClass" value="com.marcus.util.quartz.JobDemo"/>
    	<property name="jobDataAsMap">
    		<map>
    			<entry key="timeout" value="12"/>
    		</map>
    	</property>
    </bean>
    <bean id="jobDemo2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<property name="targetObject">
    		<bean class="com.marcus.util.quartz.JobDemo2"/>
    	</property>
    	<property name="targetMethod" value="doJob"/>
    	<property name="concurrent" value="false"/> <!-- 作业不并发调度 -->
    </bean>
    <!-- 定时器quartz作业触发器1. SimpleTriggerBean，只支持按照一定频度调用任务，如每隔30分钟运行一次。 -->
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="jobDemo2"/>
		<property name="startDelay" value="0"/>  <!-- 调度工厂实例化后，经过0秒开始调度 -->
		<property name="repeatInterval" value="2000000"/> <!-- 每两秒调度一次 -->
	</bean>
	<!-- 定时器quartz作业触发器2. CronTriggerBean，支持到指定时间运行一次，如每天12:00运行一次等。 -->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDemo2"/>
		<property name="cronExpression" value="0 0 12 * * ?"/>  <!-- 每天12:00运行一次 -->
	</bean>
	<!-- 配置定时器调度工厂 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean>
	
</beans>